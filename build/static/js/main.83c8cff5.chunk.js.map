{"version":3,"sources":["components/Person.js","components/Persons.js","components/Form.js","components/Notification.js","services/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","name","number","Button","props","onClick","text","Persons","result","persons","map","i","key","dellaa","Form","onSubmit","addName","value","newName","onChange","handleNoteChange","newNumber","handleNumberChange","type","Notification","message","errorStyle","className","axios","get","then","response","data","newObject","post","id","delete","App","useState","setPersons","useEffect","personService","initialPersons","setNewName","setNewNumber","errorMessage","setErrorMessage","setErrorStyle","event","preventDefault","returnedPerson","concat","setTimeout","target","window","confirm","filter","p","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.83c8cff5.chunk.js","sourcesContent":["import React from 'react'\r\nvar result\r\n\r\n\r\nconst Person = ({ person }) => {\r\n     \r\n    return (\r\n      <div>\r\n       {person.name} {person.number}\r\n      </div>\r\n    )\r\n  }\r\n  export default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Button = (props) => (\r\n  <button onClick={props.onClick}>\r\n    {props.text}\r\n  </button>\r\n)\r\nconst Persons = (props) => {    \r\n    const result = props.persons.map((persons, i) =>         \r\n        <li key={i}>\r\n            <Person person={persons}/> <Button onClick={() => props.dellaa(persons)} text='delete'/> \r\n        </li>\r\n        \r\n        \r\n    )\r\n    return (\r\n      <div>\r\n        <ul>\r\n        {result} \r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n  export default Persons","import React from 'react'\r\n\r\n\r\nconst Form = (props) => {\r\n    \r\n\r\n    return (\r\n        <form onSubmit={props.addName}>\r\n        <div>\r\n          name: <input value={props.newName}\r\n          onChange={props.handleNoteChange}/>\r\n        </div>\r\n        <div>number: <input value={props.newNumber}\r\n          onChange={props.handleNumberChange}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n  export default Form","import React from 'react'\r\nconst Notification = (props) => {\r\n    if (props.message === null) {\r\n      return null\r\n    }\r\n    if (props.errorStyle===1){   \r\n    return (\r\n        <div className=\"success\">\r\n          {props.message}\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"error\">\r\n        {props.message}\r\n      </div>\r\n    )\r\n  }\r\n  export default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nconst dellaa = (id) => {\r\n    const request = axios.delete(baseUrl + id)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, dellaa }","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Form from './components/Form'\nimport Notification from './components/Notification'\nimport personService from './services/Persons.js'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nconst App = () => {\nconst [ persons, setPersons ] = useState([])\nuseEffect(() => {\n   personService\n      .getAll()\n      .then(initialPersons => {        \n      setPersons(initialPersons)\n    })\n}, [])\nconst [ newName, setNewName ] = useState('')\nconst [ newNumber, setNewNumber ] = useState('')\nconst [errorMessage, setErrorMessage] = useState(null)\nconst [errorStyle, setErrorStyle] = useState(0)\nconst addName = (event) => {\n  event.preventDefault()  \n  /*const namesToSearch = persons.map(persons => persons.name)\n  if (namesToSearch.includes(newName)){    \n    setErrorMessage(\n      `${newName} is already in the phonebook`, 0\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 2000)\n    setNewName('')\n    setNewNumber('')\n    \n    return{\n\n      } \n    }*/\n  const personObject = {\n    name: newName,   \n    number: newNumber,\n  }\n  personService\n    .create(personObject)\n    .then(returnedPerson => {\n      setPersons(persons.concat(returnedPerson))\n      setNewName('')\n      setNewNumber('')\n    })\n    setErrorMessage(\n      `${newName} added to the phonebook`, 1\n    )\n    setErrorStyle(1)\n    setTimeout(() => {\n      setErrorMessage(null)\n      setErrorStyle(0)\n    }, 2000)  \n  \n}\n\nconst dellaa =(props) => {\n  const result = window.confirm(\"Delete\" + props.name +\"?\")\n  if(result===true){\n    personService\n      .dellaa(props.id)    \n      .then(() => {        \n        setPersons(persons.filter(p => p.id != props.id))\n    })\n    setErrorMessage(\n      `${props.name} deleted from the phonebook`, 0\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 2000)    \n  }\n  \n}\nconst handleNoteChange = (event) => {  \n  setNewName(event.target.value)\n}\n\nconst handleNumberChange = (event) => {  \n  setNewNumber(event.target.value)\n}  \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} errorStyle={errorStyle} />\n      <p></p>\n      <Form addName={addName} handleNoteChange={handleNoteChange} handleNumberChange={handleNumberChange} persons={persons} newName={newName} newNumber={newNumber}  />\n      <h2>Numbers</h2>\n      <Persons persons={persons} dellaa={dellaa}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}